'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _is = require('../../is');

var _funcs = require('../../shared/funcs');

var _funcs2 = _interopRequireDefault(_funcs);

var _processor = require('../helper/processor');

var _processor2 = _interopRequireDefault(_processor);

var _resolver = require('./resolver');

var _resolver2 = _interopRequireDefault(_resolver);

var _compute = require('./compute');

var _compute2 = _interopRequireDefault(_compute);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/**
 * main function
 * @param {string} opt - inquiry option. day/month/year/hours..
 * @param {date|number} - from - until inputes date
 * @returns {number} - computed difference btw two required dates
 **/
var countBtw = function countBtw(opt) {
  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  // throw err if no opt avaliable.
  if (!(0, _is.isValid)(opt)) return (0, _funcs2.default)(opt);
  var fromUntil = [];
  var includeLastDay = false;
  if (args.includes('i')) {
    fromUntil = args.slice(0, 2);
    includeLastDay = true;
  } else {
    fromUntil = [].concat(args);
  }

  var _processor$countBtw = _processor2.default.countBtw(opt.trim()),
      computefunc = _processor$countBtw.computefunc,
      expectedTSfunc = _processor$countBtw.expectedTSfunc;
  // if no computefunc, it means opt dosent match any pattern.


  if (!computefunc) return (0, _funcs2.default)([opt].concat(args));
  var frmTl = _resolver2.default.apply(undefined, [expectedTSfunc].concat(_toConsumableArray(fromUntil)));
  // if no tl or frm, it fromUntil is not corret.
  if (!frmTl[0] || !frmTl[1]) return (0, _funcs2.default)(fromUntil);
  // compute
  return _compute2.default[computefunc](frmTl[0], frmTl[1], includeLastDay);
};

exports.default = countBtw;