'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _readTs = require('../../readTs');

var _readTs2 = _interopRequireDefault(_readTs);

var _readableDate = require('../../helper/generator/readableDate');

var _readableDate2 = _interopRequireDefault(_readableDate);

var _msTimeResolver = require('./msTimeResolver');

var _msTimeResolver2 = _interopRequireDefault(_msTimeResolver);

var _daysResolver = require('./daysResolver');

var _daysResolver2 = _interopRequireDefault(_daysResolver);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * no default value.
 * @param {number} - timeConstants, the number of milliseconds delay for time, day and week.
 * @param {string} - computing function name, for year and month.
 * @param {number} - times, how many later or ago the user wants?
 * @param {boolean} - isTs
 * @param {char} - reqMathType '+' or '-'
 * @return {number|timestamp|object}
  - number: if the user required the result in number.
  _ timestamp: if the user required the result in timestamp: ts
  _ object: if the user required full date.

 **/
var resolver = function resolver(timeConstants, times, expectedTSfunc, dateUnit, reqMathType, resultForm) {
  var finalResult = void 0;
  // create now ts
  var nwTS = new Date().getTime();
  // if there is no time constants, compute date array.
  if (!timeConstants) {
    var requiredDate = (0, _daysResolver2.default)(nwTS, parseInt(times, 10), dateUnit, reqMathType);
    if (resultForm === 'num') {
      if (dateUnit === 'm') {
        finalResult = requiredDate[1];
      } else {
        // dateUnit === 'y'
        finalResult = requiredDate[2];
      }
    } else if (resultForm === 'ts') {
      finalResult = new Date(requiredDate[2], // year
      requiredDate[1], // month
      requiredDate[0], // day
      new Date(nwTS).getUTCHours(), // hours
      new Date(nwTS).getUTCMinutes(), // minutes
      new Date(nwTS).getUTCSeconds()).getTime();
    } else {
      // resultForm is full date.
      finalResult = (0, _readTs2.default)(new Date(requiredDate[2], // year
      requiredDate[1], // month
      requiredDate[0], // day
      new Date(nwTS).getUTCHours(), // hours
      new Date(nwTS).getUTCMinutes(), // minutes
      new Date(nwTS).getUTCSeconds()).getTime());
    }
  } else {
    // known timeConstants for time and days.
    var computedTS = (0, _msTimeResolver2.default)(nwTS, timeConstants, times, reqMathType);
    if (resultForm === 'num') {
      finalResult = _readableDate2.default[expectedTSfunc](new Date(computedTS).getTime());
    } else if (resultForm === 'ts') {
      finalResult = computedTS;
    } else {
      // resultForm is full date.
      finalResult = (0, _readTs2.default)(computedTS);
    }
  }
  return finalResult;
};

exports.default = resolver;