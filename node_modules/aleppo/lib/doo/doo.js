"use strict";

var _marked = [iterator].map(regeneratorRuntime.mark);

/* eslint func-names: ["error", "as-needed"]*/
function iterator(funcs, candidates) {
  var j, i;
  return regeneratorRuntime.wrap(function iterator$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          j = 0;

        case 1:
          if (!(j < candidates.length)) {
            _context.next = 12;
            break;
          }

          i = 0;

        case 3:
          if (!(i < funcs.length)) {
            _context.next = 9;
            break;
          }

          _context.next = 6;
          return funcs[i](candidates[j]);

        case 6:
          i += 1;
          _context.next = 3;
          break;

        case 9:
          j += 1;
          _context.next = 1;
          break;

        case 12:
        case "end":
          return _context.stop();
      }
    }
  }, _marked[0], this);
}

var array = function array(funcs, candidates) {
  var results = [];
  for (var j = 0; j < candidates.length; j += 1) {
    for (var i = 0; i < funcs.length; i += 1) {
      results.push(funcs[i](candidates[j]));
    }
  }
  return results;
};

var object = function object(funcs, candidates) {
  var results = [];
  for (var j = 0; j < candidates.length; j += 1) {
    for (var i = 0; i < funcs.length; i += 1) {
      results.push({
        func: funcs[i].name,
        result: funcs[i](candidates[j])
      });
    }
  }
  return results;
};

module.exports = {
  iterator: iterator,
  array: array,
  object: object
};