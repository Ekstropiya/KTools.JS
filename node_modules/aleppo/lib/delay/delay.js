'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regex = require('../shared/regex');

var _constants = require('../shared/constants');

var _funcs = require('../shared/funcs');

var _is = require('../is');

/**
 * Calculate time duration accourding to given time format.
 *
 * @param {val} integer. Number wanted for given value.
 * @param {options} char. Character, shortcuts => s : SECOND
                                                  m : MINUTE
                                                  h : HOUR
                                                  d : DAY
                                                  w:  WEEK
                                                  mo: MONTH
                                                  y : YEAR.
 */

var get = function get(val, reqFormat) {
  // year
  if (reqFormat.match(_regex.DATE.YEAR.FULL) || reqFormat.match(_regex.DATE.YEAR.SHORT)) {
    return val * _constants.DELAY_VALUES[7];
  }
  // month
  if (reqFormat.match(_regex.DATE.MONTH.CHAR) || reqFormat.match(_regex.DATE.MONTH.SHORT) || reqFormat.match(_regex.DATE.MONTH.FULL)) {
    return val * _constants.DELAY_VALUES[6];
  }
  // week
  if (reqFormat.match(_regex.DATE.WEEK.CHAR) || reqFormat.match(_regex.DATE.WEEK.SHORT) || reqFormat.match(_regex.DATE.WEEK.FULL)) {
    return val * _constants.DELAY_VALUES[5];
  }
  // day
  if (reqFormat.match(_regex.DATE.DAY.CHAR) || reqFormat.match(_regex.DATE.DAY.SHORT) || reqFormat.match(_regex.DATE.DAY.FULL)) {
    return val * _constants.DELAY_VALUES[4];
  }
  // time
  if (reqFormat.match(_regex.TIME.HOUR.FULL)) {
    return val * _constants.DELAY_VALUES[3];
  }
  if (reqFormat.match(_regex.TIME.MINUTE)) {
    return val * _constants.DELAY_VALUES[2];
  }
  if (reqFormat.match(_regex.TIME.SECOND)) {
    return val * _constants.DELAY_VALUES[1];
  }
  if (reqFormat.match(_regex.TIME.MILISECOND)) {
    return val * _constants.DELAY_VALUES[0];
  }
  return (0, _funcs.err)(val);
};

var delay = function delay(val) {
  if ((0, _is.isValid)(val)) {
    var valArray = val.split(/(\d+)/);
    var value = valArray[1];
    var opt = valArray[2];
    if ((0, _is.isValid)(value, opt)) {
      return get(parseInt(value.trim(), 10), opt.trim().toLowerCase());
    }
    return (0, _funcs.err)(val);
  }
  return (0, _funcs.err)(val);
};

exports.default = delay;