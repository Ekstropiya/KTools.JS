'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// single argument


// returns true for valid typeof


// typeof functions//
var isUn = function isUn(candidate) {
  return typeof candidate === 'undefined';
};
var isNull = function isNull(candidate) {
  return candidate === null;
};
var isValid = function isValid(candidate) {
  return !isUn(candidate) && !isNull(candidate);
};
var isObj = function isObj(candidate) {
  return (typeof candidate === 'undefined' ? 'undefined' : _typeof(candidate)) === 'object';
};
var isBool = function isBool(candidate) {
  return typeof candidate === 'boolean';
};
var isNum = function isNum(candidate) {
  return typeof candidate === 'number';
};
var isStr = function isStr(candidate) {
  return typeof candidate === 'string';
};
var isFn = function isFn(candidate) {
  return typeof candidate === 'function';
};
// const isSymb = candidate => typeof candidate === 'symbol';
// const isEqual = (n1, n2) => n1.length === n2.length && n1.every((v, i) => v === n2[i]);

// mixed
var isArr = function isArr(candidate) {
  return Array.isArray(candidate);
};
var isZeroLength = function isZeroLength(candidate) {
  return candidate.length === 0;
};

module.exports = {
  isUn: isUn,
  isNull: isNull,
  isValid: isValid,
  isObj: isObj,
  isBool: isBool,
  isNum: isNum,
  isStr: isStr,
  isFn: isFn,
  // isSymb,
  isArr: isArr,
  isZeroLength: isZeroLength
};