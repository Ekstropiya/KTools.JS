'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isArrEmpty = exports.isStrEmpty = exports.isZeroLength = exports.isArr = exports.isFn = exports.isStr = exports.isNum = exports.isBool = exports.isObj = exports.isValid = exports.isNull = exports.isUn = undefined;

var _oneArg = require('./oneArg');

var _oneArg2 = _interopRequireDefault(_oneArg);

var _doo = require('../doo');

var _doo2 = _interopRequireDefault(_doo);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// typeof functions for multiples args//
// multiple arguments


var isUn = function isUn() {
  for (var _len = arguments.length, candidates = Array(_len), _key = 0; _key < _len; _key++) {
    candidates[_key] = arguments[_key];
  }

  return !_doo2.default.array([_oneArg2.default.isUn], [].concat(candidates)).includes(false);
};
var isNull = function isNull() {
  for (var _len2 = arguments.length, candidates = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    candidates[_key2] = arguments[_key2];
  }

  return !_doo2.default.array([_oneArg2.default.isNull], [].concat(candidates)).includes(false);
};
var isValid = function isValid() {
  for (var _len3 = arguments.length, candidates = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    candidates[_key3] = arguments[_key3];
  }

  return !_doo2.default.array([_oneArg2.default.isValid], [].concat(candidates)).includes(false);
};
var isObj = function isObj() {
  for (var _len4 = arguments.length, candidates = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
    candidates[_key4] = arguments[_key4];
  }

  return !_doo2.default.array([_oneArg2.default.isObj], [].concat(candidates)).includes(false);
};
var isBool = function isBool() {
  for (var _len5 = arguments.length, candidates = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
    candidates[_key5] = arguments[_key5];
  }

  return !_doo2.default.array([_oneArg2.default.isBool], [].concat(candidates)).includes(false);
};
var isNum = function isNum() {
  for (var _len6 = arguments.length, candidates = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
    candidates[_key6] = arguments[_key6];
  }

  return !_doo2.default.array([_oneArg2.default.isNum], [].concat(candidates)).includes(false);
};
var isStr = function isStr() {
  for (var _len7 = arguments.length, candidates = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
    candidates[_key7] = arguments[_key7];
  }

  return !_doo2.default.array([_oneArg2.default.isStr], [].concat(candidates)).includes(false);
};
var isFn = function isFn() {
  for (var _len8 = arguments.length, candidates = Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
    candidates[_key8] = arguments[_key8];
  }

  return !_doo2.default.array([_oneArg2.default.isFn], [].concat(candidates)).includes(false);
};
// const isSymb = (...candidates) => !(doo.array([oneArg.isSymb], [...candidates]).includes(false));

// mixed
var isArr = function isArr() {
  for (var _len9 = arguments.length, candidates = Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
    candidates[_key9] = arguments[_key9];
  }

  return !_doo2.default.array([_oneArg2.default.isArr], [].concat(candidates)).includes(false);
};

var isZeroLength = function isZeroLength() {
  for (var _len10 = arguments.length, candidates = Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
    candidates[_key10] = arguments[_key10];
  }

  return !_doo2.default.array([_oneArg2.default.isZeroLength], [].concat(candidates)).includes(false);
};

var isStrEmpty = function isStrEmpty() {
  for (var _len11 = arguments.length, candidates = Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
    candidates[_key11] = arguments[_key11];
  }

  return !_doo2.default.array([isValid, isStr, isZeroLength], [].concat(candidates)).includes(false);
};

var isArrEmpty = function isArrEmpty() {
  return isArr.apply(undefined, arguments) && isZeroLength.apply(undefined, arguments);
};

exports.isUn = isUn;
exports.isNull = isNull;
exports.isValid = isValid;
exports.isObj = isObj;
exports.isBool = isBool;
exports.isNum = isNum;
exports.isStr = isStr;
exports.isFn = isFn;
exports.isArr = isArr;
exports.isZeroLength = isZeroLength;
exports.isStrEmpty = isStrEmpty;
exports.isArrEmpty = isArrEmpty;